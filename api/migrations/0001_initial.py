# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-29 21:16
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('article_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, null=True)),
                ('authors', models.CharField(blank=True, max_length=200, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('url', models.URLField(max_length=500)),
                ('videos', models.URLField(blank=True, null=True)),
                ('summary', models.CharField(max_length=5000)),
                ('text', models.TextField()),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('subjectivity', models.IntegerField(blank=True, null=True)),
                ('hotness', models.IntegerField(blank=True, default=0, null=True)),
                ('spelling', models.IntegerField(blank=True, null=True)),
                ('grammar', models.IntegerField(blank=True, null=True)),
                ('party_subjectivity_article', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-pub_date'],
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('url', models.URLField(blank=True, null=True)),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('upvoted', models.IntegerField(default=0)),
                ('downvoted', models.IntegerField(default=0)),
                ('approval', models.BooleanField(default=True)),
                ('downvoted_by', models.ManyToManyField(related_name='cit_downv_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CitationComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True)),
                ('text', models.TextField()),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('upvoted', models.IntegerField(default=0)),
                ('downvoted', models.IntegerField(default=0)),
                ('citation_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comm_citation', to='api.Citation')),
                ('downvoted_by', models.ManyToManyField(related_name='cit_com_downv_by', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cit_comm_recipient', to=settings.AUTH_USER_MODEL)),
                ('upvoted_by', models.ManyToManyField(related_name='cit_com_upv_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cit_comm_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('cluster_id', models.AutoField(primary_key=True, serialize=False)),
                ('cluster_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True)),
                ('text', models.TextField()),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('upvoted', models.IntegerField(default=0)),
                ('downvoted', models.IntegerField(default=0)),
                ('article_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comm_article', to='api.Article')),
                ('downvoted_by', models.ManyToManyField(related_name='com_downv_by', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comm_recipient', to=settings.AUTH_USER_MODEL)),
                ('upvoted_by', models.ManyToManyField(related_name='com_upv_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comm_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Fact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentence_id', models.IntegerField()),
                ('text', models.CharField(max_length=5000, null=True)),
                ('upvoted', models.IntegerField(default=0)),
                ('downvoted', models.IntegerField(default=0)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fact_article', to='api.Article')),
                ('downvoted_by', models.ManyToManyField(related_name='fact_downv_by', to=settings.AUTH_USER_MODEL)),
                ('upvoted_by', models.ManyToManyField(related_name='fact_upv_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fact_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=100)),
                ('country', models.TextField(blank=True, max_length=100)),
                ('subjectivity', models.IntegerField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('url', models.URLField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=100)),
                ('url', models.URLField(max_length=500)),
                ('country', models.TextField(max_length=100)),
                ('source_subjectivity', models.IntegerField(blank=True, null=True)),
                ('bias', models.IntegerField(blank=True, null=True)),
                ('affiliations', models.ManyToManyField(blank=True, related_name='affiliation', to='api.Party')),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('story_id', models.AutoField(primary_key=True, serialize=False)),
                ('story_name', models.CharField(max_length=200)),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('rating_users', models.IntegerField(blank=True, null=True)),
                ('rating_subjectivity', models.IntegerField(blank=True, null=True)),
                ('hotness', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('keywords', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('story_cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='story_cluster', to='api.Cluster')),
            ],
            options={
                'ordering': ['-date', '-hotness'],
            },
        ),
        migrations.AddField(
            model_name='citation',
            name='fact_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cit_fact', to='api.Fact'),
        ),
        migrations.AddField(
            model_name='citation',
            name='upvoted_by',
            field=models.ManyToManyField(related_name='cit_upv_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='citation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cit_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='article',
            name='article_cluster',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='article_cluster', to='api.Cluster'),
        ),
        migrations.AddField(
            model_name='article',
            name='keywords',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='article',
            name='party_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Party'),
        ),
        migrations.AddField(
            model_name='article',
            name='source_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Source'),
        ),
        migrations.AddField(
            model_name='article',
            name='story_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='api.Story'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='clusters',
            field=models.ManyToManyField(related_name='user_cluster', to='api.Cluster'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='interests',
            field=models.ManyToManyField(related_name='user_interest', to='api.Interest'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
