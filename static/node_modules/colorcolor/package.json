{
  "name": "colorcolor",
  "version": "1.1.1",
  "description": "colorcolor converts Hex/HexA/RGB/RGBA/HSL/HSLA/HSV/HSB color strings to Hex/HexA/RGB/RGBA/HSL/HSLA/HSV/HSB color strings.",
  "main": "./src/colorcolor.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/metaloha/color2color.git"
  },
  "keywords": [
    "color",
    "convert"
  ],
  "author": {
    "name": "Russel Porosky"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/metaloha/color2color/issues"
  },
  "homepage": "http://metaloha.github.io/color2color/",
  "devDependencies": {
    "babel-preset-es2015": "^6.14.0",
    "babelify": "^7.3.0",
    "grunt": "^1.0.1",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-uglify": "^2.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-mocha-test": "^0.13.0",
    "grunt-newer": "^1.2.0",
    "jit-grunt": "^0.10.0",
    "mocha": "^3.0.2",
    "watch": "^0.19.2"
  },
  "dependencies": {
    "color-name": "^1.1.1"
  },
  "readme": "# colorcolor - Javascript Function\n\nThe colorcolor function converts Hex/HexA/RGB/RGBA/HSL/HSLA/HSV/HSB color strings to Hex/HexA/RGB/RGBA/HSL/HSLA/HSV/HSB color strings.\n\n## Demo\n\n[http://metaloha.github.io/color2color/](http://metaloha.github.io/color2color/)\n\n## Install\n\n`colorcolor` is available via NPM:\n\n\tnpm install colorcolor\n\nAnd Bower:\n\n\tbower install colorcolor\n\nOf course, you can also just download the minified distribution file from here instead if you prefer :)\n\n## Usage\n\n\tcolorcolor( string originalColor, [string newColorType( rgba|hex|hexa|rgb|hsl|hsla|hsv )], [bool calculateOpacity( false|true )]\n\nThe first argument is the original color string in RGB, RGBA, Hex, HexA, HSL, HSLA, or HSV format.\n\nThe second argument (optional) is which format you'd like the new color string to be in. This will always default to `\"rgba\"`.\n\nThe final argument (optional) will include a calculated opacity against white if the second argument is `\"rgba\"`, `\"hexa\"`, or `\"hsla\"`.\n\n## Examples\n\n\tvar newColor = colorcolor( \"#dfe\" ); // Returns \"rgba(221,255,238,1)\"\n\tvar newColor = colorcolor( \"#036\", \"rgb\" ); // Returns \"rgb(0,51,102)\"\n\tvar newColor = colorcolor( \"rgba(64,64,64,0.5)\" ); // Returns \"rgba(64,64,64,0.5)\"\n\tvar newColor = colorcolor( \"rgb(64,64,64)\", \"hex\" ); // Returns \"#404040\"\n\tvar newColor = colorcolor( \"#dfe\", \"rgba\", true ); // Returns \"rgba(0,255,128,0.1333)\"\n\tvar newColor = colorcolor( \"hsla(109,100%,37%,1)\" ); // Returns \"rgba(35,189,0,1)\"\n\tvar newColor = colorcolor( \"rgba(35,189,0,0.75)\", \"hsl\" ); // Returns \"hsl(109,100%,37%)\"\n\n## Testing\n\nYou can run `grunt test` to run the tests alone. The testing will also run after every change made while `grunt dev` is watching for changes, and if you run `grunt` with no arguments they run yet again.\n",
  "readmeFilename": "README.md",
  "_id": "colorcolor@1.1.1",
  "dist": {
    "shasum": "7a0eb8371cb8a45016f50672d5cb760488af285c"
  },
  "_from": "colorcolor@",
  "_resolved": "https://registry.npmjs.org/colorcolor/-/colorcolor-1.1.1.tgz"
}
